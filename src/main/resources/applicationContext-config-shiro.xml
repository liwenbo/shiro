<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.0.xsd ">


	<!-- 缓存管理器 -->
    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache/ehcache.xml"/>
    </bean>

	<bean id="springCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcacheManager"/>
    </bean>
    
    <!-- shiro 提供的用于注入自己的Cache -->
    <bean id="cacheManager" class="com.shiro.cache.SpringCacheManagerWrapper">
        <property name="cacheManager" ref="springCacheManager"/>
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.shiro.credentials.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- Realm实现 -->
    <bean id="userRealm" class="com.shiro.realm.UserRealm">
        <property name="cachingEnabled" value="true"/>  <!-- 启用缓存，默认false -->
        <!-- 注入凭证匹配器 -->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        
        <!-- 禁用权限缓存，防止修改权限之后不能立即生效的问题 -->
        <property name="authenticationCachingEnabled" value="false"/>  <!-- 启用身份验证缓存，即缓存AuthenticationInfo 信息，默认false ,如设置未true，修改密码后需要clearCachedAuthenticationInfo清空缓存，不然会找之前的密码 -->
        <property name="authenticationCacheName" value="authenticationCache"/>  <!-- 缓存AuthenticationInfo信息的缓存名称 -->
        
        <property name="authorizationCachingEnabled" value="false"/>  <!-- 启用授权缓存，即缓存AuthorizationInfo信息，默认false，如设置未true则缓存这个用户的所有权限信息，当权限信息发生更改时需要清空缓存 -->
        <property name="authorizationCacheName" value="authorizationCache"/>  <!-- 缓存AuthorizationInfo信息的缓存名称 -->
    </bean>


    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>


    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天 -->
    </bean>


    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>



    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
    	<!-- 激活ehcache缓存，还需要设置securityManager 使用ehcache缓存，如如不设置将默认采用MapCache -->
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <!-- 会话生成器 -->
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- 会话验证调度器 --><!-- org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler -->
    <bean id="sessionValidationScheduler" class="com.shiro.expand.ExpandQuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/><!-- 设置回话过期时间/毫秒 -->
       	<!-- 设置会话验证调度器进行会话验证时的会话管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
    	<!-- 设置全局会话超时时间 -->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 会话过期自动删除默认true -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 是否开启会话验证器，默认是开启的 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 设 置 会 话 验 证 调 度 器  -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- sessionDao 设置 -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

	<!-- 用于控制并发登录人数的 -->
	<bean id="kickoutSessionControlFilter" class="com.shiro.web.shiro.filter.KickoutSessionControlFilter">
		<property name="cacheManager" ref="cacheManager" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="kickoutAfter" value="false" /> <!-- false-后者踢掉前者    true-前者踢掉后者 --> 
		<property name="maxSession" value="1" />  <!-- 同一个用户最大的会话数 -->
		<property name="kickoutUrl" value="/login?kickout=1" />
	</bean>

    <!-- 
    	安全管理器
    	Shiro 内部相应的组件（DefaultSecurityManager）会自动检测相应的对象（如 Realm）是否实现了 CacheManagerAware 并自动注入相应的 CacheManager  
    -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    	<!-- 注入自己的realm -->
        <property name="realm" ref="userRealm"/>
        <!-- 注入会话管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
        <!-- 注入cache组件 -->
        <property name="cacheManager" ref="cacheManager"/>
        <!-- 记住我管理 -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 基于Form表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
        <property name="loginUrl" value="/login"/>
    </bean>

    <bean id="sysUserFilter" class="com.shiro.web.shiro.filter.SysUserFilter"/>
	<bean id="forceLogoutFilter" class="com.shiro.web.shiro.filter.ForceLogoutFilter" />
	
    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/>
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="sysUser" value-ref="sysUserFilter"/>
                <!-- 不允许用户重复登陆 -->
                <entry key="kickout" value-ref="kickoutSessionControlFilter"/>
                <!-- 强制踢出 -->
                <entry key="forceLogout" value-ref="forceLogoutFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /login = authc
                /static/** = anon
                /logout = logout
                /authenticated = authc
                /** = forceLogout,kickout,user,sysUser
            </value>
        </property>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<bean class="com.shiro.expand.ExpandAuthorizingRealm"/>
	

</beans>